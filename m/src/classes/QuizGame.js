
import Game from '@src/classes/Game.js'
import { isEmpty } from '@src/helpers'

function QuizGame({
  time,
  score,
  questions=[
    // {
    //   question: 'What is our home planet name',
    //   options: ['Venus', 'Earth', 'Mars', 'Mercury'],
    //   correctAns: 1, // index
    //   selected: null, // this key is generated by program not required
    // }
  ],
  onSelect=()=>{},
  onStart=()=>{},
  onSuccess=()=>{},
  onFailed=()=>{},
  onTimesUp=()=>{},
}={}){

  Game.call(this, {time, score})
  this.onSelect = onSelect
  this.onStart = onStart
  this.onSuccess = onSuccess
  this.onFailed = onFailed
  this.onTimesUp = onTimesUp
  this.questions = questions.map((node)=>({
    ...node,
    selected: null
  }))

  if( typeof arguments[1] === 'object'){
    const ext = arguments[1]
    Object.keys(ext).forEach((key)=>{
      this[key] = ext[key]
    })
  }
}

QuizGame.prototype = new Game()

QuizGame.prototype.start = function(){
  Game.prototype.start.call(this)
  this.onStart()
}

QuizGame.prototype.success = function(){
  Game.prototype.success.call(this)
  this.onSuccess()
}

QuizGame.prototype.failed = function(){
  Game.prototype.failed.call(this)
  this.onFailed()
}

QuizGame.prototype.timesUp = function(){
  Game.prototype.timesUp.call(this)
  this.onTimesUp
}

QuizGame.prototype.answer = function(questionIndex=0, ans=null, callback=()=>{}){
  this.questions[questionIndex].selected = ans
  this.onSelect(this.questions[questionIndex])
  callback(this.questions[questionIndex])
}

export default QuizGame